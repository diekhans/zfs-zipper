#!/usr/bin/env python3
"""ZFS-based backup driver with rotating backup sets.

A BackupSet consists of one or more BackupPools for backing up the same set of
source data and can be rotated.  A BackupSet contained one or more ZFS files
systems to back up.

The source file system structure is reproduced under the top level BackupPool
file system. Snapshots of the source file systems are use to manage the backup
on the BackupPool file systems.  The first back is conceptually a `full'
backup, but this could start at any snapshot.  Subsequent backups are sent as
deltas between snapshots.

Snapshots are named in the form:
    zipper_<GMT>_<backupset>

Older versions names snapshots in the forms:
    zipper_<GMT>_<backupset>_full
    zipper_<GMT>_<backupset>_incr
However, the concept of full vs increment wasn't useful and these extensions
are now just part of the name and not added for new snapshots

When a backup is started, a new snapshot is made on the source file system.
Incremental snapshots are sent to the backup file system starting after
the most recent common snapshot to the new source snapshot.

If there are no zfs-zipper snapshots on the backup file system, all snapshots
are copied.  If there are zfs-zipper snapshots, but no common ones, it is
currently an error.

This has also been used to clone all backups to a new file system.

Other features maybe added in the future to adjust starting snapshot
to allow for omitting deleted data.

"""

import os.path as osp
import sys
import argparse
import fcntl
import logging
myBinDir = osp.normpath(osp.dirname(sys.argv[0]))
sys.path.insert(0, osp.join(myBinDir, "../lib/zfs-zipper"))
from zfszipper.zfs import Zfs
from zfszipper.backup import BackupSetBackup, BackupRecorder, BackupError
from zfszipper.config import evalConfigFile
from zfszipper import loggingOps
from zfszipper.cmdrunner import stdflush
logger = logging.getLogger()

defaultConfig = osp.join(myBinDir, "../etc/zfs-zipper.conf.py")

def parseCommand():
    usage = """Create snapshots on ZFS pools and send to backup pools.
    """
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument("--list", "-l", dest="listSets", action="store_true", default=False,
                        help="""List backup sets""")
    parser.add_argument("--conf", default=defaultConfig, dest="configPy",
                        help="""Configuration file written in Python.  It should do a `from zfszipper.config import *'
                        and then create an instance of BackupConf() stored in a module-global variable `config'.""")
    parser.add_argument("--source-file-system", metavar="name", dest="sourceFileSystemNames", action="append",
                        help="""Backup only this ZFS file system (not mount point).   Must specify --backupSet. This option maybe repeated.""")
    parser.add_argument("--snap-only", dest="snapOnly", action="store_true", default=False,
                        help="""Only create source snapshots don't backup to disk.  They will be backed up on the next real backup.""")
    parser.add_argument("--allow-degraded", dest="allowDegraded", action="store_true", default=False,
                        help="""Allow backup to a degraded pool""")
    parser.add_argument("backupSetNames", metavar="backupSetName", default=[], nargs='*',
                        help="""Backup only these sets.  If not specified, all sets in with available backup pools are backed up.  With --snapOnly, all sets have snapshots made if not specified.""")
    loggingOps.addCmdOptions(parser)
    args = parser.parse_args()
    setattr(args, "config", evalConfigFile(args.configPy))
    if args.sourceFileSystemNames is not None:
        args.sourceFileSystemNames = [osp.normpath(fs) for fs in args.sourceFileSystemNames]
    checkBackupSubsetArgs(parser, args)
    return args

def checkBackupSubsetArgs(parser, args):
    if (args.sourceFileSystemNames is not None) and (len(args.backupSetNames) != 1):
        parser.error("must specify a single backUpSet with --source-file-system-name")
    for backupSetName in args.backupSetNames:
        backupSetConf = args.config.getBackupSet(backupSetName)  # error if not found
    if args.sourceFileSystemNames is not None:
        for sourceFileSystemName in args.sourceFileSystemNames:
            backupSetConf.getSourceFileSystem(sourceFileSystemName)  # error if not found

class Backup(object):
    "controls overall backup from args"
    def __init__(self, config, backupSetNames, sourceFileSystemNames, snapOnly, allowDegraded):
        self.config = config
        self.recorder = None if snapOnly else BackupRecorder(self.config.recordFile, sys.stdout)
        self.zfs = Zfs()
        self.backupSetNames = backupSetNames
        self.sourceFileSystemNames = tuple(sourceFileSystemNames) if sourceFileSystemNames is not None else None
        self.snapOnly = snapOnly
        self.allowDegraded = allowDegraded
        self.lockFh = None

    def _getSnapOnlyBackupsSets(self):
        """get backup sets to use for snapOnly"""
        if len(self.backupSetNames) > 0:
            return [self.config.getBackupSet(bs) for bs in self.backupSetNames]
        else:
            return tuple(self.config.backupSets)

    def _getAvailablePools(self):
        "get all imported or exported pools"
        return self.zfs.listExportedPools() + self.zfs.listPools()

    def _havePoolForSet(self, availPools, backupSet):
        for availPool in availPools:
            if availPool.name in backupSet.byBackupPoolName:
                return True
        return False

    def _getActiveBackupSetsByName(self, availPools):
        backupSets = [self.config.getBackupSet(bs) for bs in self.backupSetNames]
        for backupSet in backupSets:
            if not self._havePoolForSet(availPools, backupSet):
                raise Exception("no back pool available for {}".format(backupSet.name))
        return backupSets

    def _getActiveBackupSetsByPools(self, availPools):
        backupSets = []
        for backupSet in self.config.backupSets:
            if self._havePoolForSet(availPools, backupSet):
                backupSets.append(backupSet)
        if len(backupSets) == 0:
            raise Exception("no back pools available for any backupset")
        return backupSets

    def _getActiveBackupSets(self):
        availPools = self._getAvailablePools()
        if len(self.backupSetNames) > 0:
            return self._getActiveBackupSetsByName(availPools)
        else:
            return self._getActiveBackupSetsByPools(availPools)

    def __obtainLock(self):
        self.lockFh = open(self.config.lockFile, "w")
        try:
            fcntl.lockf(self.lockFh, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as ex:
            raise BackupError("can't lock {}, is another backup running?".format(self.config.lockFile), ex)

    def _backupOneSet(self, backupSetConf, sourceFileSystemNames=None):
        backupper = BackupSetBackup(self.zfs, self.recorder, backupSetConf, self.allowDegraded)
        sourceFileSystemConfs = None
        if sourceFileSystemNames is not None:
            sourceFileSystemConfs = [backupSetConf.getSourceFileSystem(n) for n in sourceFileSystemNames]
        if self.snapOnly:
            backupper.snapOnly(sourceFileSystemConfs)
        else:
            backupper.backup(sourceFileSystemConfs)

    def runBackups(self):
        self.__obtainLock()
        if self.snapOnly:
            backupSets = self._getSnapOnlyBackupsSets()
        else:
            backupSets = self._getActiveBackupSets()
        for backupSetConf in backupSets:
            self._backupOneSet(backupSetConf, self.sourceFileSystemNames)

def doBackup(config, backupSetNames, sourceFileSystemNames, snapOnly, allowDegraded):
    backup = Backup(config, backupSetNames, sourceFileSystemNames, snapOnly, allowDegraded)
    try:
        backup.runBackups()
    except Exception as ex:
        stdflush()
        logger.exception("zfs-zipper backup of failed")
        sys.stderr.write("error: " + str(ex) + " (specify --logDebug for more details)\n")
        sys.exit(1)

    logger.info("zfs-zipper backup of complete")

def _listBackupSet(backupSet, fh):
    print("backup set:", backupSet.name, file=fh)
    for sourceFs in backupSet.sourceFileSystemConfs:
        print("\tsource fs:", sourceFs.name, file=fh)
    for backupPool in backupSet.byBackupPoolName.values():
        print("\tbackup pool:", backupPool.name, file=fh)

def doListBackupSets(config, fh):
    for backupSet in config.backupSets:
        _listBackupSet(backupSet, fh)

def main(args):
    loggingOps.setupFromCmd(args)
    if args.listSets:
        doListBackupSets(args.config, sys.stdout)
    else:
        doBackup(args.config, args.backupSetNames, args.sourceFileSystemNames, args.snapOnly, args.allowDegraded)


main(parseCommand())
